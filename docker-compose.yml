networks:
  kafka-net:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - kafka-net
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # Aumenta il limite di dimensione massima dei messaggi (5MB)
      KAFKA_MESSAGE_MAX_BYTES: 5242880
      # Aumenta la dimensione massima della richiesta che un consumer pu√≤ fare
      KAFKA_REPLICA_FETCH_MAX_BYTES: 5242880
      # Buffer di memoria per le richieste
      KAFKA_REPLICA_SOCKET_RECEIVE_BUFFER_BYTES: 5242880
    networks:
      - kafka-net
    restart: unless-stopped

  data-fetcher:
    build: ./data-fetcher
    container_name: data-fetcher
    volumes:
      - ./data-fetcher:/app
    depends_on:
      - kafka
    networks:
      - kafka-net
    restart: unless-stopped
    environment:
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_API_SECRET: ${BINANCE_API_SECRET}

  data-preprocessor:
    build: ./data-preprocessor
    container_name: data-preprocessor
    volumes:
      - ./data-preprocessor:/app
    depends_on:
      - kafka
      - data-fetcher
    networks:
      - kafka-net
    restart: unless-stopped

  model-trainer:
    build: ./model-trainer
    container_name: model-trainer
    volumes:
      - ./model-trainer:/app
      - ./models:/models
    depends_on:
      - kafka
      - data-preprocessor
    networks:
      - kafka-net
    restart: unless-stopped

  predictor:
    build: ./predictor
    container_name: predictor
    volumes:
      - ./predictor:/app
      - ./models:/models
    depends_on:
      - kafka
      - model-trainer
    networks:
      - kafka-net
    restart: unless-stopped

  analysis-service:
    build: ./analysis-service
    container_name: analysis-service
    volumes:
      - ./analysis-service:/app
    depends_on:
      - kafka
    networks:
      - kafka-net
    restart: unless-stopped

  notifier-service:
    build: ./notifier-service
    container_name: notifier-service
    volumes:
      - ./notifier-service:/app
    depends_on:
      - kafka
    environment:
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
      TELEGRAM_CHAT_IDS: ${TELEGRAM_CHAT_IDS}
    networks:
      - kafka-net
    restart: unless-stopped

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "5001:5001"  # Mappa la porta 5001 dell'host a quella del container
    depends_on:
      - kafka
    networks:
      - kafka-net
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - kafka-net
    restart: unless-stopped


